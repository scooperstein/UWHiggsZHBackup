###Step 0###
cmsrel CMSSW_5_2_5
cd CMSSW_5_2_5/src
cmsenv
cvs co HiggsAnalysis/CombinedLimit
scram b -j4
cd ../..
cp -r HCG CMSSW_5_2_5/src
cp -r RunLimits/scripts/* CMSSW_5_2_5/src/HCG
cd CMSSW_5_2_5/src/HCG
mkdir results
mkdir plots 

(if running for 7+8TeV cards, you can copy just the 7TeV HCG and then from that HCG dir do,
for d in $(ls .); do echo $d; cp <path to other HCG>/HCG/$d/* $d; done to cp all the cards into one HCG dir)


###Step1###
#Make combined cards and binary workspaces

--->./makeCardsWorkspaces.sh <massfile> <sqrts>

where massfile can be masses.txt or the like which contains a list of masses to be processed,
(Remember it only works if you list masses that you created cards for :-) )
and sqrts 
== 7 for 7 TeV only (only cp HCG/$masses for 7 TeV cards)
== 8 for 8 TeV only (only cp HCG/$masses for 8 TeV cards)
== 0 for 7+8 TeV (cp -r HCG for the 7 TeV cards and then do 'for i in $(cat <massfile>); do echo $i; cp <path to 8 TeV HCG>/$i/* $i/; done' )
== -1 for 7+8+2l2tau cards (same idea as for 0)


############################# Running in Batch Mode ##################################
This script uses other scripts to batch to a pbs scheduler, through makeLimits.pbs.sh

python make_parallel_limits.py -h

Usage: make_parallel_limits.py [options] 
make_parallel_limits.py -h for help

Options:
  -h, --help            show this help message and exit
  -M METHOD, --method=METHOD
                        type [ASCLS,PLP,PLPE,PLS,PLSE,ML]
  -f MASSFILE, --massfile=MASSFILE
                        mass file [masses_half.txt]
  -q SCHEDULER, --scheduler=SCHEDULER
                        scheduler [pbs or lsf]
  -t TOOL, --tool=TOOL  tool [lands or combine]
  -o OPTIONS, --options=OPTIONS
                        options [-S for strict]

to see options for input

type = ASCLS, PLP, PLPE, PLS, PLSE, ML
options = <nothing>-default, -s for strict



############################# Running in Serial Mode ##################################


################ Profile Likelihood ##################
To produce approximate limits using PL asymptotics 

---> for M in $(cat masses.txt); do bash make_PLC_hzz4l.sh $M comb_hzz4l.root; done

This will create in each mass directory a root file with the limit and a log file called e.g. comb.log.PLC. You can find below how to harvest these files 
and make plots

If you get bad fits for some masses, you can repeat the limit in a more robust way repeating the fit multiple times (but it's much slower, so you probably
don't want to do it for all masses)

--->for M in ...; do bash make_PLC_hzz4l.sh -s $M comb_hzz4l.root; done

################ Asymptotic CLS ##################

---> for M in $(cat masses.txt); do bash make_ASCLS.sh -l $M comb_hzz4l.root; done

This will create in each mass directory a root file with the limit and a log file called e.g. comb.log.PLC. You can find below how to harvest these files 
and make plots

If you get bad fits for some masses, you can repeat the limit in a more robust way repeating the fit multiple times (but it's much slower, so you probably
don't want to do it for all masses)

--->for M in $(cat masses.txt); do bash make_ASCLS.sh -s $M comb_hzz4l.root; done

To produce _p_-value scans 

--->for M in $(cat masses.txt); do bash make_PLC_hzz4l.sh -P $M comb_hzz4l.root; done

To get the robust estimate, use -s -P (note that -P -s does not work, the bash script is not smart enough)
The output files will be called PLP instead of PLC.


################ FREQ CLs limits on the grid ####################
The procedure is:
-get an estimate of the limit from ASCLS, harvest, run bands
-create a grid of test statistic distributions around that value
-use the grid to compute observed and expected limits

--->./harvest.sh -v ASCLS hzz4l

--->root -b -l -q makeBands.cxx

--->root -l -b -q "plots.cxx(0)"

--->chmod -w grids/hzz4l.txt

The first two points are done with the make_grid.sh script; modify it to set the number of points and toys to something reasonable for your case; a ballpark number is 10-20 points and 1k-5k toys per point. You can check how many jobs would be submitted with

--->bash make_grid_new.sh --pri $M comb_hzz4l.root

(--pri only if you have priority user)

and then submit them with

--->for M in $(cat masses_NUMBER.txt); do bash make_grid_new.sh --go --pri $M comb_hzz4l.root; done

Some suggestions:
If you're submitting directly to the grid and not to some faster batch queue, split the masses.txt file in multiple sub-files because otherwise it will 
take hours to submit all jobs

You can use the script watch_grid.sh to monitor your grid jobs: takes as argument one mass, it will check all crab sub-directories under that mass 
directory and submit/getoutput/resubmit jobs if necessary.

You can re-send more jobs making another crab task, e.g. bash make_grid.sh --go -2 $M comb.root will create task directory crab_0_comb_wide.2 and so on 
(from -2 up to -7)

If you get a wrong grid for a given point, you can force the grid endpoints manually with; e.g. to make a grid in the 0.05-1.0 interval for m(H) = 325 GeV
do 
--->bash make_grid.sh -F 0.5:1 325 comb.root

If your observed limit turns out to be far from the expected one, when re-making more points you can submit them centered on the CLS expected limit using 
--->bash make_grid.sh --exp $M comb.root.

For the second part, there is the make_FREQ.sh script, which works similarly to the make_PLC.sh (but it's much slower, so again we suggest to split the 
mass.txt in several subfiles and run them in parallel)

Check and retreive output
--->for M in $(cat masses_NUMBER.txt); do bash watch_grid.sh $M; done

Run all limits
--->for M in $(cat masses_NUMBER.txt); do bash make_FREQ.sh $M comb_hzz4l.root; done






########################### PVALUES ##############################
To produce p-value scans 

--->for M in $(cat masses.txt); do bash make_PLC.sh -P $M comb_hzz4l.root; done

expected

--->for M in $(cat masses.txt); do bash make_PLC.sh --PE $M comb_hzz4l.root; done

To get the robust estimate, use -s -P (note that -P -s does not work, the bash script is not smart enough)
The output files will be called PLP instead of PLC.

You can edit make_PLC.sh to make --PE do expected significance instead of just p-value.







######################### HARVESTING RESULTS #########################

--->./harvest.sh <method> hzz4l

where method is either PLP, PLPE, FREQ, SMCLS, BAYES, PLC, ASCLS, ML 

Bands: 

Customise the makeBands.cxx script to read the bands that you want. Pay attention to keep the global variable use_precomputed_quantiles to true for CLS 
stuff and to false otherwise. Run it with

--->root.exe -b -l -q $CMSSW_BASE/src/HiggsAnalysis/CombinedLimit/test/plotting/bandUtils.cxx+ makeBands_hzz4l.cxx

Customize the ==plots.cxx== file, create a =plots= directory (or symlink to a directory somewhere else) and do

--->root.exe -b -l -q $CMSSW_BASE/src/HiggsAnalysis/CombinedLimit/test/plotting/bandUtils.cxx+ plots.cxx



See 
https://twiki.cern.ch/twiki/bin/viewauth/CMS/HiggsCombinationPreApproval,
https://twiki.cern.ch/twiki/bin/viewauth/CMS/HiggsCombinationInstructions
for more help
May you always have high limits and low p-values! :-)


###################### LandS ########################

Observed Asym.

./lands.exe -L $CMSSW_BASE/lib/slc5_amd64_gcc434/libHiggsAnalysisCombinedLimit.so --bMultiSigProcShareSamePDF  --minuitSTRATEGY 2  -M Asymptotic --maximumFunctionCallsInAFit 50000  -rMin 0 -rMax 100 -m $M -d cards.txt

Expected Asym.

./lands.exe -L $CMSSW_BASE/lib/slc5_amd64_gcc434/libHiggsAnalysisCombinedLimit.so --bMultiSigProcShareSamePDF  --minuitSTRATEGY 2  --PLalgorithm Migrad -M Asymptotic -D asimov_b  --maximumFunctionCallsInAFit 50000 -m $M -d cards*.txt






